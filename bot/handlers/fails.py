"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ—É–¥–∞—á–∞–º–∏ (fail).

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ
–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã "/fail". –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ä–≤–∏—Å `FailService`
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –æ –Ω–µ—É–¥–∞—á–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–§—É–Ω–∫—Ü–∏–∏:
- create_fail: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/fail" –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –Ω–µ—É–¥–∞—á–µ.
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from bot.services.users import UserService
from bot.services.fails import FailService
from logging import info

router = Router()

class FailStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –Ω–µ—É–¥–∞—á–µ."""
    waiting_for_name = State()
    waiting_for_description = State()
    
@router.message(Command("fail"))
async def start_fail_creation(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –Ω–µ—É–¥–∞—á–µ.

    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–µ–π–ª–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç
    —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ–π–ª–∞.
    
    Attributes:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    await state.set_state(FailStates.waiting_for_name)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ–π–ª–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    
@router.message(FailStates.waiting_for_name)
async def process_fail_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–µ–π–ª–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –∏, –µ—Å–ª–∏ –æ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ
    –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ–π–ª–∞.
    
    Attributes:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    if len(message.text) > 100:
        await message.reply("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ:")
        return
    
    await state.update_data(name=message.text)
    await state.set_state(FailStates.waiting_for_description)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ–π–ª–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):")

@router.message(FailStates.waiting_for_description)
async def process_description(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–µ–π–ª–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –Ω–µ—É–¥–∞—á–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.
    
    Attributes:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    if len(message.text) > 1000:
        await message.reply("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ:")
        return
    
    user_data = await state.get_data()
    await state.clear()
    
    user_service = UserService(session)
    user = await user_service.get_by_chat_id(message.from_user.id)
    
    if not user:
        await message.reply("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    fail_service = FailService(session)
    fail = await fail_service.create_fail(
        user_id=user.id,
        name=user_data["name"],
        description=message.text
    )
    
    await message.reply(
        f"–§–µ–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {fail.name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {fail.description}"
    )


@router.message(Command("top"))
async def show_top_losers(message: Message, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ—É–¥–∞—á.

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    –Ω–µ—É–¥–∞—á –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Attributes:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    fail_service = FailService(session)
    
    await fail_service.debug_relationships()
    
    top_users = await fail_service.get_top_losers(10)
    
    if not top_users:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞—Ñ–µ–π–ª–∏–ª!")
        return
    
    info(f"Top losers: {top_users}")
    text = "üèÜ –¢–æ–ø –ª—É–∑–µ—Ä–æ–≤ –≥–æ–¥–∞:\n\n"
    for i, (user, total_rating) in enumerate(top_users, 1):
        text += f"{i}. {user.username}: {total_rating} –æ—á–∫–æ–≤ –ø–æ–∑–æ—Ä–∞\n"
    
    await message.answer(text)

@router.message(Command("vote"))
async def show_fails_for_voting(message: Message, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–µ–π–ª—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–µ–π–ª—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
    
    Attributes:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    fail_service = FailService(session)
    fails = await fail_service.get_fails_for_voting(5)
    
    if not fails:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ñ–µ–π–ª–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")
        return
    
    builder = InlineKeyboardBuilder()
    for fail in fails:
        builder.button(
            text=fail.name, 
            callback_data=f"read_fail:{fail.id}"
        )
    builder.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–µ–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("read_fail:"))
async def read_fail(callback: CallbackQuery, session: AsyncSession):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–µ–π–ª–µ.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–µ–π–ª–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
    –∑–∞ –Ω–µ–≥–æ, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    
    Attributes:
        callback (CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    fail_id = int(callback.data.split(":")[1])
    fail_service = FailService(session)
    fail = await fail_service.get_fail_by_id(fail_id)
    
    if not fail or not fail.user:
        await callback.answer("–§–µ–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üëé -1", callback_data=f"vote:{fail.id}:-1")
    builder.button(text="üëç +1", callback_data=f"vote:{fail.id}:1")
    
    text = f"ü§¶‚Äç‚ôÇÔ∏è –§–µ–π–ª –æ—Ç {fail.user.username}:\n\n"
    text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {fail.name}\n"
    text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {fail.description}\n"
    text += f"–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {fail.rating}"
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("vote:"))
async def vote_fail(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ñ–µ–π–ª.

    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–µ–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
    –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≥–æ–ª–æ—Å.
    
    Attributes:
        callback (CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    _, fail_id, rating = callback.data.split(":")
    fail_service = FailService(session)
    await fail_service.update_rating(int(fail_id), int(rating))
    await callback.answer("–ì–æ–ª–æ—Å —É—á—Ç–µ–Ω!")